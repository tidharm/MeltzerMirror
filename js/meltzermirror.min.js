/*

meltzermirror.min.js includes:
  ./js/compliment.js
  ./js/datetime.js
  ./js/weather.js

Load order in index.html:
  <script type="text/javascript" src="js/datetime.js"></script>
  <script type="text/javascript" src="js/weather.js"></script>
  <script type="text/javascript" src="js/compliment.js"></script>
*/

/*********************************************************************
======================================================================
                            Prerequisites
======================================================================
**********************************************************************/

var localization = "he";
document.getElementById("localization").value = localization;

if (localization == "he"){
	var monthNames = ['ינואר','פברואר','מרץ','אפריל','מאי','יוני','יולי','אוגוסט','ספטמבר','אוקטובר','נובמבר','דצמבר'];
	var dayNames = ['ראשון', 'שני', 'שלישי', 'רביעי', 'חמישי', 'שישי', 'שבת'];
}else{
	var monthNames = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];
	var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
}


// IP Info (obtain token from https://ipinfo.io/account)
var ipinfoAccessToken;
// Open Weather Map (obtain API Key from https://home.openweathermap.org/api_keys)
var owmAppId;
// Google Maps API Key (obtain API Key from https://console.cloud.google.com/apis/dashboard)
var googleMapsApiKey;

// Obtain values from local storage, prompt for values if empty
ipinfoAccessToken = localStorage.getItem("ipinfoAccessToken" + "LS");
if (!ipinfoAccessToken) {
	ipinfoAccessToken = prompt("IPInfo Token not specified.\nGo to  https://ipinfo.io/account, obtain your token and enter it below.\n\nTo prevent this prompt from popping on each load, populate the variable 'ipinfoAccessToken' in /js/pats.js.", "IPInfo Access Token"); 
}

owmAppId = localStorage.getItem("owmAppId" + "LS");
if (!owmAppId) {
	owmAppId = prompt("Open Weather Map App ID not specified.\nGo to  https://home.openweathermap.org/api_keys, obtain your App ID and enter it below.\n\nTo prevent this prompt from popping on each load, populate the variable 'owmAppId' in /js/pats.js.", "Open Weather Map App ID"); 
}

googleMapsApiKey = localStorage.getItem("googleMapsApiKey" + "LS");
if (!googleMapsApiKey) {
	googleMapsApiKey = prompt("Google Maps API Key not specified.\nGo to  https://console.cloud.google.com/apis/dashboard, obtain your API Key and enter it below.\n\nTo prevent this prompt from popping on each load, populate the variable 'googleMapsApiKey' in /js/pats.js.", "Google Maps API Key"); 
}

/*********************************************************************
======================================================================
                             datetime.js
======================================================================
**********************************************************************/

function checkTime(i) {
  if (i < 10) {
    i = "0" + i;
  }
  return i;
}

function getTime() {
  var d = new Date();
  var h = d.getHours();
  var m = d.getMinutes();
  var s = d.getSeconds();
  // add a zero in front of numbers<10
  h = checkTime(h);
  m = checkTime(m);
  s = checkTime(s);
  return h + ":" + m + ":" + s;
}

function getDateTime() {
  var d = new Date(),
    seconds = d.getSeconds().toString().length == 1 ? '0'+d.getSeconds() : d.getSeconds(),
    minutes = d.getMinutes().toString().length == 1 ? '0'+d.getMinutes() : d.getMinutes(),
    hours = d.getHours().toString().length == 1 ? '0'+d.getHours() : d.getHours(),
    months = monthNames,
    days = dayNames;
  if (localization == "he"){
    var date = days[d.getDay()]+', '+d.getDate()+' ב'+months[d.getMonth()]+', '+d.getFullYear();
  }else{
    var date = days[d.getDay()]+', '+months[d.getMonth()]+' '+d.getDate()+', '+d.getFullYear();
  }
  
  var time = hours+':'+minutes+':'+seconds;
  //return days[d.getDay()]+', '+months[d.getMonth()]+' '+d.getDate()+' '+d.getFullYear()+"\u00A0\u00A0\u00A0"+hours+':'+minutes+':'+seconds;
  return [date,time];
}

function convertUnixTime(unixTime, includeSeconds) {
  var dt = new Date(unixTime*1000);
  var time = dt.getHours() + ':' + ("0" + dt.getMinutes()).substr(-2);
  if (includeSeconds) {
    time = time + ':' + ("0" + dt.getSeconds()).substr(-2);
  }
  return time;
}

function getWeekday(tsUnix, shortName) {
  var weekDay = "";
  var weekDays = ['Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday'];
  var date = new Date();
  if (tsUnix > 0) {
    try {
      // javascript timestamps are in milliseconds
      date.setTime(tsUnix*1000);
    } catch (ex) {}
  } // Else it will return NOW's weekday
  //var tsUtc = date.toUTCString();
  weekDay = weekDays[date.getDay()].substring(0, (shortName ? 3 : 9)); // if shortName==true, take only 1st 3 letters
  return weekDay;
}

function showTime() {
  //curTS = getTime();
  curTS = getDateTime();
  document.getElementById('time').innerHTML = curTS[1];
  document.getElementById('date').innerHTML = curTS[0];
  t = setTimeout(function() {
    showTime()
  }, 500);
}
showTime();

/*********************************************************************
======================================================================
                             weather.js
======================================================================
**********************************************************************/

// Settings
// Icons: https://icons8.com/icon/set/clouds/ios

// IP Info
//var ipinfoAccessToken = ''; //https://ipinfo.io/account
var ipInfoUrl = 'https://ipinfo.io/json?token=' + ipinfoAccessToken;

// Open Weather Map
//var owmAppId = ''; //https://home.openweathermap.org/api_keys
var owmLine = new Error().lineNumber;
var weatherUrl = 'http://api.openweathermap.org/data/2.5/weather?APPID='+owmAppId+'&units=metric';
// 5 day / 3 hour forecast
var forecastUrl = 'http://api.openweathermap.org/data/2.5/forecast?APPID='+owmAppId+'&units=metric';
// 16 day / daily forecast
//var forecastUrl = 'http://api.openweathermap.org/data/2.5/forecast/daily?APPID='+owmAppId+'&units=metric';

var logLevel = 3; // [ 0 - None | 1 - Info | 2 - Error | 3 - Debug | 4 - Trace ]
var degChar = "\xB0";


function capitalizeTitle(phrase) {
  var words = phrase.split(" ");
  for (var i = 0; i < words.length; i++) {
    var curWord = words[i];
    words[i] = curWord.charAt(0).toUpperCase() + curWord.slice(1);
  }
    return words.join(" ");
}

function calcForecast(fcJson, dayCnt) {
  if (!dayCnt) {var dayCnt = 5;}
  var debug = false;

  var today = getWeekday(0,true);
  if (logLevel > 2) { console.log('[Debug] ' + "Today: " + today); }
  
  var dftIcon = "01d"; // Clear Sky Day icon, the lowest-priority for display
  var dftMnTp = 100; // Initial value, so that any temp_min value would be lower
  var dftMxTp = -50; // Initial value, so that any temp_max value would be higher
  
  var prvWday = today; // Initial value
  var prvIcon = dftIcon;
  var prvMnTp = dftMnTp;
  var prvMxTp = dftMxTp;
  var curDayFc = [prvWday, dftIcon, dftMnTp, dftMxTp];
  
  var fullForecast = new Array(dayCnt); // The multidim array to be returned eventually
  var d = 0; // d(ay) will be fullForecast's coordinates
  var fcListCnt = fcJson.cnt;
  var fcList = fcJson.list; // Forecast JSON's .list node
  
  for (var n = 0; n < fcListCnt; n++) {
    var curNode = fcList[n];
    var curWday = getWeekday(curNode.dt, true);
    var curIcon = curNode.weather[0].icon;
    var curMnTp = curNode.main.temp_min;
    var curMxTp = curNode.main.temp_max;
    
    if (logLevel > 3) { console.log('[Trace] ', curNode.dt, curWday, curIcon, curMnTp, curMxTp); }
    
    // Current Weekday
    if (curWday != curDayFc[0]) {
      fullForecast[d] = curDayFc;
      d++;
      curDayFc = [curWday, dftIcon, dftMnTp, dftMxTp];
    }
    // Current Icon
    if (curIcon.endsWith("d") && curIcon != curDayFc[1]) {
      prvIcon = curDayFc[1];
      curDayFc[1] = (parseInt(curIcon.substring(0,2), 10) > parseInt(prvIcon.substring(0,2), 10)) ? curIcon : prvIcon;
    }
    // Current Min Temp
    prvMnTp = curDayFc[2];
    curDayFc[2] = (curMnTp < prvMnTp) ? curMnTp : prvMnTp;
    // Current Max Temp
    prvMxTp = curDayFc[3];
    curDayFc[3] = (curMxTp > prvMxTp) ? curMxTp : prvMxTp;
    
    if (logLevel > 3) { console.log('[Trace] ' + curDayFc); }
    
    // Append last Array
    if (n + 1 == fcListCnt) {
      fullForecast[d] = curDayFc;
    }
  }
  if (logLevel > 2) { console.log('[Debug] ', (dayCnt + " Day Forecast:"), fullForecast); }
  return fullForecast;
}

function sendRequest (method, url) {
  return new Promise(function (reqSuccess, reqFail) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    xhr.onload = function () {
      if (this.status >= 200 && this.status < 300) {
        if (logLevel > 3) {console.log('[Trace] ' + "sendRequest - reqSuccess: " + xhr.response);}
        reqSuccess(xhr.response);
      } else {
        if (logLevel > 3) {console.log('[Trace] ' + "sendRequest - reqFail: " + xhr.statusText);}
        reqFail({
          status: this.status,
          statusText: xhr.statusText
        });
      }
    };
    xhr.onerror = function () {
      if (logLevel > 3) {console.log('[Trace] ' + "sendRequest - onerror: " + xhr.statusText);}
      reqFail({
        status: this.status,
        statusText: xhr.statusText
      });
    };
    xhr.send();
  });
}

// Get IP Info
sendRequest('GET', ipInfoUrl).then(
  function (reqSuccess) {
    // If retrieved IP Info
    var ipInfo = JSON.parse(reqSuccess);
    if (ipInfo.loc) {
      var locLat = ipInfo.loc.split(",")[0].trim();
      var locLon = ipInfo.loc.split(",")[1].trim();
      if (logLevel > 0) { console.log('[Info] ' + "Retrieving weather for\nLat: " + locLat + ", Long: " + locLon); }
      weatherUrl = weatherUrl + '&lat=' + locLat + '&lon=' + locLon;
      forecastUrl = forecastUrl + '&lat=' + locLat + '&lon=' + locLon;
	  
	  // Get City name from Google Maps API
	  //var url = "http://maps.googleapis.com/maps/api/geocode/json?key="+googleMapsApiKey+"&latlng="+locLat+","+locLon+"&sensor=true&language="+localization;
	  
    } else if (ipInfo.city) {
      if (logLevel > 0) { console.log('[Info] ' + "Retrieving weather for city: " + ipInfo.city); }
      weatherUrl = weatherUrl + '&q='+ipInfo.city;
      forecastUrl = forecastUrl + '&q='+ipInfo.city;
    } else {
      if (logLevel > 0) {console.error("Retrieving weather for city: Default (no lon, lat or city params provided)");}
      weatherUrl = weatherUrl + '&q=Eilat'; // Default, so you'll know something is wrong
      forecastUrl = forecastUrl + '&q=Eilat'; // Default, so you'll know something is wrong
    }
    
    // Get Weather
    sendRequest('GET', weatherUrl).then(
      function (reqSuccess) {
        if (logLevel > 3) {console.log('[Trace] ' + "Weather result: " + reqSuccess);}
        //================ Populate weather ================//
        if (logLevel > 2) {console.log('[Debug] ' + "Upating webpage with weather values");}
        
        //Parse response
        var wJsonRes = JSON.parse(reqSuccess);
        //var wJsonRes = reqSuccess;
        
        if ((wJsonRes.name != ipInfo.city) && (logLevel > 1)) {console.log('[Error] ' + "City discrepancy:\nIpInfo: "+ipInfo.city+"\nOWM: "+wJsonRes.name);}
        
        //var wMain = wJsonRes.weather[0].main;
        //var wHumidity = wJsonRes.main.humidity;
        //var wWindSpeed = wJsonRes.wind.speed;
        //var wWindDeg = wJsonRes.wind.deg;
		
        //Update webpage
        document.getElementById('sunriseTime').innerHTML = convertUnixTime(wJsonRes.sys.sunrise);
        document.getElementById('sunsetTime').innerHTML = convertUnixTime(wJsonRes.sys.sunset);
        
        document.getElementById('weatherCity').innerHTML = wJsonRes.name;
        document.getElementById('weatherIcon').src = 'images/100px/' + wJsonRes.weather[0].icon + '.png';
        document.getElementById('weatherTemp').innerHTML = Math.round(wJsonRes.main.temp) + degChar;
        document.getElementById('weatherDescription').innerHTML = capitalizeTitle(wJsonRes.weather[0].description);
      
        //==================================================//
        
        // Get Forecast
        setTimeout(function() {
          sendRequest('GET', forecastUrl).then(
            function (reqSuccess) {
              if (logLevel > 3) {console.log('[Trace] ' + "Forecast result: " + reqSuccess);}
              //================ Populate forecast ===============//
              if (logLevel > 2) {console.log('[Debug] ' + "Upating webpage with weather values");}
              
              //Parse response
              var fJsonRes = JSON.parse(reqSuccess);
              //var fJsonRes = reqSuccess;
              
              var curForecast = calcForecast(fJsonRes);
              if (logLevel > 3) {console.log('[Trace] ' + curForecast);}
              
              //Update webpage
              for (var d = 0; d < curForecast.length; d++) {
                document.getElementById('fc-wday'+d).innerHTML = curForecast[d][0];
                document.getElementById('fc-icon'+d).src = 'images/50px/' + curForecast[d][1] + '.png';
                document.getElementById('fc-mntp'+d).innerHTML = Math.round(curForecast[d][2]) + degChar;
                document.getElementById('fc-mxtp'+d).innerHTML = Math.round(curForecast[d][3]) + degChar;
              }
              //==================================================//
              
              if (logLevel > 0) {console.log('[Info] ' + "Done well");}
            }, function (reqFail) {
              if (logLevel > 0) {console.error("Forecast failed: " + reqFail);}
            }
          );
        },1300);
      }, function (reqFail) {
        if (logLevel > 0) {console.error("Weather failed: " + reqFail);}
      }
    );
  }, function (reqFail) {
    if (logLevel > 0) {console.error("IP Info retrieval failed: " + reqFail);}
    document.getElementById('bottom-left-text').innerHTML = "IP Info Request Failed: " + reqFail;
  }
).catch(
  function (err) {
    if (logLevel > 0) {console.error('Exception caught!', err);}
  }
);

/*********************************************************************
======================================================================
                           compliment.js
======================================================================
**********************************************************************/

var compliments = ['Hang in there...','Keep working dude','Nothing to see here','Bla Bla Bla'];

function setCompliment() {
  var curCompliment = "Nothing";
  
  var today = getWeekday(0,false);
  if (today == 'Sunday') {
    curCompliment = 'Fresh start... Have a great week!';
  } else if (today == 'Thursday') {
    curCompliment = 'Almost weekend...';
  } else if ((today == 'Saturday') && (new Date().getHours() > 19)) {
    curCompliment = 'Getting ready for a new week?';
  } else {
    var randomIndex = Math.floor(Math.random() * Math.floor(compliments.length));
    curCompliment = compliments[randomIndex];
  }
  
  document.getElementById('compliment').innerHTML = curCompliment;
  t = setTimeout(function() {setCompliment()}, 1800000);
}
setCompliment();
